# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dUJeV2k-ChoAuUu6F-IPW1n8PGtGaw5d
"""

import streamlit as st
from datasets import load_dataset
import joblib
import string
import random

# Load dataset
dataset = load_dataset("Pradeep016/career-guidance-qa-dataset")
df = dataset['train'].to_pandas()

# Load model and vectorizer
model = joblib.load('intent_model.pkl')
vectorizer = joblib.load('vectorizer.pkl')

# Text cleaning
def clean_text(text):
    text = text.lower()
    text = text.translate(str.maketrans('', '', string.punctuation))
    return text

st.set_page_config(page_title="Career Chatbot", page_icon="🎓")
st.title("🎓 Career Guidance Chatbot")
st.write("Ask about your interests and get suggested career roles!")

if "messages" not in st.session_state:
    st.session_state.messages = []

for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

# Chat input
if user_query := st.chat_input("What's your interest or question?"):
    st.session_state.messages.append({"role": "user", "content": user_query})
    with st.chat_message("user"):
        st.markdown(user_query)

    # Prediction
    cleaned = clean_text(user_query)
    vec = vectorizer.transform([cleaned])
    predicted_role = model.predict(vec)[0]

    # Fetch answer
    answers = df[df['role'] == predicted_role]['answer'].tolist()
    selected_answer = random.choice(answers) if answers else "No answer found."

    bot_msg = f"🎯 **Career Suggestion**: `{predicted_role}`\n\n🧠 **Info**: {selected_answer}"
    st.session_state.messages.append({"role": "assistant", "content": bot_msg})
    with st.chat_message("assistant"):
        st.markdown(bot_msg)

# Sidebar manual role selector
st.sidebar.title("🔍 Explore Careers")
role = st.sidebar.selectbox("Select a career field", sorted(df['role'].unique()))

if role:
    st.sidebar.markdown(f"### 📌 Role: `{role}`")
    example_qas = df[df['role'] == role].sample(3)
    for _, row in example_qas.iterrows():
        st.sidebar.markdown(f"**Q:** {row['question']}\n\n**A:** {row['answer']}\n---")